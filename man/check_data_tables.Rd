% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_data_tables.R
\name{check_data_tables}
\alias{check_data_tables}
\alias{read_data_tables}
\alias{check_table_names}
\alias{check_column_names}
\alias{check_column_types}
\alias{check_missing_values}
\alias{check_unique}
\alias{check_bucket_paths}
\alias{check_valid_entity_id}
\alias{check_primary_keys}
\alias{check_foreign_keys}
\alias{parse_column_name_check}
\alias{parse_column_type_check}
\title{Check tables against data model}
\usage{
read_data_tables(files, table_names = names(files), quiet = TRUE)

check_table_names(tables, model)

check_column_names(tables, model)

check_column_types(tables, model)

check_missing_values(tables, model)

check_unique(tables, model)

check_bucket_paths(tables, model)

check_valid_entity_id(tables, model)

check_primary_keys(tables, model)

check_foreign_keys(tables, model)

parse_column_name_check(chk)

parse_column_type_check(chk)
}
\arguments{
\item{files}{Vector of file paths, one per data table.}

\item{table_names}{Vector of table names associated with \code{files}.}

\item{quiet}{Logical to control printing results of column parsing from \code{\link{read_tsv}}.}

\item{tables}{Named list of data tables}

\item{model}{\code{\link{dm}} object describing data model}

\item{chk}{output of \code{check_column_names} or \code{check_column_types}}
}
\value{
\code{read_data_tables} returns a named list of data frames.

\code{check_table_names} returns \code{NULL} if \code{tables} matches \code{model}, 
    or a list:
    \itemize{
        \item{missing_tables: }{Vector of tables in \code{model} but not in \code{tables}}
        \item{extra_tables: }{Vector of tables in \code{tables} but not in \code{model}}
    }

\code{check_column_names} return a list of all tables in common between data 
    and model. Each table element is \code{NULL} if columns in \code{tables} matches \code{model}, 
    or a list:
    \itemize{
        \item{missing_required_columns: }{Vector of required columns in \code{model} but not in \code{tables}}
        \item{missing_optional_columns: }{Vector of optional columns in \code{model} but not in \code{tables}}
        \item{extra_columns: }{Vector of columns in \code{tables} but not in \code{model}}
    }

\code{check_column_types} returns a list of all tables in common between data 
    and model. Each table element is a list of all columns in common between table and 
    model. Each column element is \code{NULL} if values in column are a compatible type 
    with the data model, or a string describing the mismatch.

\code{check_missing_values} returns a list of all tables in common between data 
    and model. Each table element is a list of all required columns in common between table and 
    model. Each column element is \code{NULL} if the column has no missing values, or 
    the number of missing values in the column.

\code{check_unique} returns a list of all tables in common between data 
    and model. Each table element is a list of all columns in common between table and 
    model also defined as unique by the model. Each column element is \code{NULL} if 
    the column is unique, or a string listing duplicated elements.

\code{check_bucket_paths} returns a list of all tables in common between data 
    and model. Each table element is

\code{check_valid_entity_id} returns a list of all tables in common between data 
    and model. Each table element is \code{NULL} if the table has a valid AnVIL entity_id, or 
    a string describing the error.

\code{check_primary_keys} returns a list with two elements:
\itemize{
  \item{found_keys}{results of \code{\link{dm_examine_constraints}}
    after applying primary keys from \code{model} to \code{tables}}
  \item{missing_keys}{list of missing primary keys in each table}
}

\code{check_foreign_keys} returns a list with two elements:
\itemize{
  \item{found_keys}{results of \code{\link{dm_examine_constraints}}
    after applying foreign keys from \code{model} to \code{tables}}
  \item{missing_keys}{list of missing child or parent keys in each table}
}

\code{parse_column_name_check} and \code{parse_column_type_check} 
  each return a tibble with check results suitable for printing
}
\description{
Read a set of files containing data tables and check them against a data model.
}
\examples{
# read data model
json <- system.file("extdata", "data_model.json", package="AnvilDataModels")
model <- json_to_dm(json)

# read tables to check
table_names <- c("subject", "phenotype", "sample", "sample_set", "file")
files <- system.file("extdata", paste0(table_names, ".tsv"), package="AnvilDataModels")
names(files) <- table_names
tables <- read_data_tables(files)

check_table_names(tables, model)
check_column_names(tables, model)
check_column_types(tables, model)
check_primary_keys(tables, model)
check_foreign_keys(tables, model)

}
